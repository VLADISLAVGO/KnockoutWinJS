(function () { "use strict"; function n(n) { var i, u, f, e, t, r; try { i = []; u = typeof n; switch (u) { case "boolean": case "function": case "number": case "string": return [{ name: u, value: n }] } for (t in n) t != "$raw" && t[0] != "_" && i.push(t); i.sort(); f = []; for (e in i) { t = i[e]; r = null; try { r = n[i[e]] } catch (o) { r = o.message } f.push({ name: t, value: r, type: typeof r }) } return f } catch (o) { console.error(o.message) } } $.extend(window, { __ASSERT__: function (n, t) { if (!n) throw { message: t }; return n }, __DEBUG__: function () { }, __ERROR__: function (n, t) { console.error("############### " + (t || "") + " ###############"); console.error(n); console.error("##############################") }, getPropertyCollection: n, getEditorCollection: function (t) { try { var i = [], r = n(t); return $.map(r, function (n) { n.isActive = ko.observable(!0); n.isActive.subscribe(function () { }); n._value = n.value; n.value = ko.observable(n._value); switch (n.name) { case "element": n.type = "debug"; i.push(n); n.isActive(!0); break; case "orientation": n.type = "selector"; n.options = $.map(WinJS.UI.Orientation, function (n, t) { return { label: t, value: n } }); i.push(n); break; case "selectionMode": n.type = "selector"; n.options = $.map(WinJS.UI.SelectionMode, function (n, t) { return { label: t, value: n } }); n.isActive(!0); i.push(n); break; case "swipeBehavior": n.type = "selector"; n.options = $.map(WinJS.UI.SwipeBehavior, function (n, t) { return { label: t, value: n } }); i.push(n); break; case "tapBehavior": case "groupHeaderTapBehavior": n.type = "selector"; n.options = n.options = $.map(WinJS.UI.TapBehavior, function (n, t) { return { label: t, value: n } }); i.push(n); break; case "addEventListener": case "removeEventListener": case "dispatchEvent": break; default: i.push(n) } }), __DEBUG__({ editors: i, properties: r }, "getEditors"), i } catch (u) { console.error("getEditorCollection error:" + u.message) } }, async: function (n, t) { var i = setTimeout(function () { n && n(); clearTimeout(i) }, t || 1) }, Promise: function (n, t) { var i = $.Deferred(), r; return i.promise(), r = setTimeout(function () { i.resolve(n && n()); clearTimeout(r) }, t || 1), i }, registerComponent: function (n, t, i) { try { __ASSERT__(n, "UNKNOWN_COMPONENT_NAME"); var r = { template: { require: "require-text!app/components/" + n + "/view.html" } }; t && (r.viewModel = { require: "app/components/" + n + "/viewmodel.js" }); i && (r.syncronous = !0); ko.components.register(n, r) } catch (u) { console.error(r + " registration error: " + u.message) } }, registerModule: function (n) { try { __ASSERT__(n, "UNKNOWN_MODULE_NAME"); $("head").append("<link href='app/modules/" + n + "/module.css' rel='stylesheet' />"); var t = { viewModel: { require: "app/modules/" + n + "/viewmodel.js" }, template: { require: "require-text!app/modules/" + n + "/view.html" } }; ko.components.register(n, t) } catch (i) { console.error(n + " registration error: " + i.message) } }, createDataSource: function (n) { for (var t = []; n; n--) t.push({ id: performance.now(), name: "abc", value: 100 }); return t } }); $.fn.extend({ match: function (n) { var t = $.grep($(this), function (t) { return $(t).is(n) }); return $(t) } }); window.Toolkit = { _typeMapping: {}, _defaultHtmlElement: "<div>", _componentBindingHandler: ko.bindingHandlers.component, Mode: { OneTime: 0, OneWay: 1, TwoWay: 2, OneWayToSource: 3 }, _ControlBase: function () { Object.defineProperty(this, "_setProperty", { value: function (n, t) { (t.value || this.hasOwnProperty(n)) && Object.defineProperty(this, n, t) }, writable: !1 }); this._setProperty("_construct", { value: function (n) { __ASSERT__(n, "CONTROLBASE_CREATION_WITHOUT_CONTROLDEFINITION_POVIDED"); __ASSERT__(n.controlType, "CONTROLBASE_CREATION_WITHOUT_CONTROL_TYPE_POVIDED"); $.extend(!0, this, n); this._setProperty("controlType", { writable: !1 }); this._setProperty("name", { value: this.name || this.controlType.toLowerCase(), writable: !1, enumerable: !0 }); this._setProperty("changeEvent", { writable: !1 }); this._setProperty("containerElement", { value: this.containerElement || Toolkit._defaultHtmlElement, writable: !1, enumerable: !0 }); delete this.type } }); this._setProperty("getPart", { value: function (n) { try { return Toolkit._getPart(n, this) } catch (t) { console.error(this.controlType + " get part error: " + t.message) } }, enumerable: !0 }); this._setProperty("setParam", { value: function (n, t, i) { try { Toolkit._setParam(n, t, i, this) } catch (r) { console.error(this.controlType + " set param error: " + r.message) } }, enumerable: !0 }); this._setProperty("setParams", { value: function (n) { try { Toolkit._setParams(n, this) } catch (t) { console.error(this.controlType + " set params error: " + t.message) } }, enumerable: !0 }); this._setProperty("setProperties", { value: function (n, t) { try { Toolkit._setProperties(n, t, this) } catch (i) { console.error(this.controlType + " set properties error: " + i.message) } }, enumerable: !0 }); this._setProperty("setReady", { value: function (n) { try { Toolkit._setReady(this.element, n) } catch (t) { console.error(this.controlType + " set param error: " + t.message) } }, enumerable: !0 }); this._setProperty("createControl", { value: function (n) { try { return Toolkit._createControl(n, this) } catch (t) { console.error(this.controlType + " create control error: " + t.message) } }, writable: !0, enumerable: !0 }); this._setProperty("_type", { value: "ControlBase", writable: !1 }); this.category = null; this.createControlElement = function () { return __ASSERT__(this.containerElement, "CONTROL_CONTAINER_ELEMENT_NOT_PROVIDED"), this.controlElement = $(this.containerElement)[0], __ASSERT__(this.controlElement, "CONTROL_ELEMENT_NOT_PROVIDED"), this.controlElement }; this.create = function (n) { try { this.createControlElement(n) } catch (t) { console.error(this.controlType + " creation failed: " + t.message) } }; this.creating = function (n) { try { this.createControl(n, this) } catch (t) { console.error(this.controlType + " creation failed: " + t.message) } }; this.created = function (n, t) { try { this.setProperties(n, t) } catch (i) { console.error(this.controlType + " creation failed: " + i.message) } } }, _ContentControlBase: function () { this.create = function (n) { try { this.createControlElement(n); $(this.controlElement).append($(this.templateNodes)) } catch (t) { console.error(this.controlType + " creation failed: " + t.message) } } }, _ItemsControlBase: function () { this._setProperty("_construct", { value: function (n) { Toolkit._ItemsControlBase.prototype._construct.call(this, n); this._setItemsProperty(this); this._setProperty("itemsControlDefinition", { writable: !1 }) }, writable: !1 }); this._setProperty("_setItemsProperty", { value: function () { try { Toolkit._setItemsProperty(this) } catch (n) { console.error(this.controlType + " create items property error: " + n.message) } }, writable: !1 }); this._setProperty("_createItemsSource", { value: function (n, t, i) { try { return Toolkit._createItemsSource(n, t, i) } catch (r) { console.error(this.controlType + " create items source error: " + r.message) } }, writable: !1, enumerable: !0 }); this.create = function (n) { try { this.createControlElement(n) } catch (t) { console.error(this.controlType + " creation failed: " + t.message) } }; this.creating = function (n) { try { this.createControl(n, this) } catch (t) { console.error(this.controlType + " creation failed: " + t.message) } }; this.created = function (n, t) { var r, i, u; try { if (r = this, i = "itemsSource", t.hasOwnProperty(i)) this.setProperties(n, t); else if (__DEBUG__({ params: t }, " set properties"), u = r.properties[i], __ASSERT__(u, "UNDEFINED_ITEMS_PROPERTY"), u) { var f = $(this.templateNodes).match(u.selector), e = f.length, o = function (u, f) { try { var o = $(u); t[i].push(f); t[i].length === e && r.setProperties(n, t); o.remove() } catch (s) { console.error(r.controlType + " item ready error: " + s.message) } }; if (e) { t[i] = []; switch (this.controlType) { default: $(this.element).append(f); f.each(function () { $(this).data({ onready: o }) }) } } else this.setProperties(n, t) } } catch (s) { console.error(this.controlType + " items failed: " + s.message) } } }, _createItemsSource: function (n, t, i) { var u = ko.unwrap(n), r; return u ? (i || (i = function (n) { return n }), t || (t = function (n, t) { return t }), r = new i($.map(u, function (n) { return n instanceof t ? n : new t(null, n) })), ko.isObservable(n) && n.subscribe(function (n) { var i = []; $.map(n, function (n) { switch (n.status) { case "deleted": i[n.index] || (i[n.index] = r.getAt(n.index)); break; case "added": n.hasOwnProperty("moved") && (i[n.moved] || (i[n.moved] = r.getAt(n.moved))) } }); $.map(n, function (n) { var o, u; switch (n.status) { case "deleted": u = r.indexOf(i[n.index]); n.hasOwnProperty("moved") ? r.move(u, n.moved) : (o = u === -1 ? n.index : u, r.splice(o, 1)); break; case "added": if (n.hasOwnProperty("moved")) u = r.indexOf(i[n.moved]), r.move(u, n.index); else { var f = n.value, e = f instanceof t ? f : new t(null, f), s = r.length, h = s - 1; n.index === s ? r.push(e) : n.index === 0 ? r.unshift(e) : (r.push(e), r.move(h, n.index)) } } }) }, this, "arrayChange"), r) : null }, _itemTemplate: function (n) { return function (t) { return t.then(function (t) { try { var i = $(n).clone().css({})[0]; return ko.applyBindingsToNode(i, { "with": t.data }), i } catch (r) { console.error("itemTemplate error: " + r.message) } }) } }, _setParam: function (n, t, i, r) { var f = r, u; t.hasOwnProperty(n) || (u = Toolkit._getPart(i, f), u && (t[n] = u)) }, _getPart: function (n, t) { var u = t, r = $(u.templateNodes).match(n), i; if (r.length && (i = r, i.length)) return r = 1 < i.length ? $("<div><\/div>").append(i) : i, r[0] }, _setParams: function (n, t) { var r = t, i = r.properties; i && ($.map(i, function (t, i) { t && t.as && n.hasOwnProperty(i) && (n[t.as] = n[i], delete n[i]) }), $.map(i, function (t, i) { if (t && (t.selector && i != "itemsSource" && Toolkit._setParam(i, n, t.selector, r), !n.hasOwnProperty(i) && t.defaultValue)) { var u = t.defaultValue; u && (n[i] = u instanceof Function ? u() : u) } })) }, _createControl: function (n, t) { var i = t; return $(i.controlElement).appendTo($(t.element)), $(i.controlElement).attr({ "data-win-control": "WinJS.UI." + i.controlType }), $(i.controlElement).addClass(i.name), $.map(i.element.attributes, function (n) { if (n.specified) switch (n.name) { case "id": $(i.controlElement).attr("id", n.value + "_Control"); break; case "params": case "data-unwrap": case "data-bind": return; default: $(i.controlElement).attr(n.name, n.value) } }), WinJS.UI.process(i.controlElement).then(function (t) { try { return __DEBUG__(i.controlElement.outerHTML), __ASSERT__(t, "CONTROL_CREATION_FAILED"), i.created(t, n), i.setReady(t), t } catch (r) { console.error(i.controlType + " creation failed: " + r.message) } }) }, _setItemsProperty: function (n) { var t = n, i, u, r; t.properties || (t.properties = {}); i = "itemsSource"; t.properties[i] || (t.properties[i] = {}); u = t.properties[i]; r = u.converter; __ASSERT__(r, "NO_CONVERTER_DEFINITION_POVIDED"); var o = r.targetType, s = r.targetItemType, f = r.targetPropertyName, e = { mode: Toolkit.Mode.OneTime, converter: { convert: function (n, r) { try { var u = t._createItemsSource(n, s, o); delete r[i]; __ASSERT__(f, "NO_TARGETPROPERTY_DEFINITION_POVIDED"); r[f] = u } catch (e) { console.error(t.controlType + " convert items source error " + e.message) } } } }; $.extend(!0, e, u); t.properties[i] = e }, __setItemsProperty: function (n) { var t = n, u = t.itemsControlDefinition, i, r, e, o, f, s; u && (i = u.itemsPropertyDefinition, __ASSERT__(i, "UNKNOWN_ITEMS_PROPERTY_DEFINITION"), r = i.name, __ASSERT__(r, "UNKNOWN_ITEMS_PROPERTY_NAME"), e = u.itemDefinition, __ASSERT__(e, "UNKNOWN_ITEM_DEFINITION_NAME"), t._setProperty("itemsPropertyName", { value: r, writable: !1, enumerable: !0 }), t.properties || (t.properties = {}), t.properties[r] || (t.properties[r] = {}), o = t.properties[r], delete i.itemInsertMethod, f = $.extend({}, i), s = t.controlType, $.extend(!0, f, { mode: Toolkit.Mode.OneTime, selector: e.selector, converter: { convert: function (r) { var o, f, e; try { return o = u.itemDefinition, __ASSERT__(u.itemDefinition, "UNKNOWN_ITEM_DEFINITION"), f = o.type || function (n, t) { return t }, __ASSERT__(f, "UNKNOWN_ITEM_TYPE"), e = t._createItemsSource(r, f, i.type, s), i.isDataSourceBinding ? e.dataSource : e } catch (h) { console.error(n.controlType + " convert items source error " + h.message) } } } }, o), delete f.name, delete f.type, delete t.itemsControlDefinition, t.properties[r] = f) }, _setProperties: function (n, t, i) { var u, r; __DEBUG__({ params: t }, " set properties"); u = i; t.hasOwnProperty("element") && (ko.isObservable(t.element) && t.element({ element: i.controlElement, control: n }), delete t.element); r = {}; u.properties && $.map(u.properties, function (n, i) { if (n) { var u = n.as || i; t.hasOwnProperty(u) && (__DEBUG__(u, "property"), r[u] = t[u]) } else r[i] = undefined }); $.extend(r, t); delete r.$raw; delete r.dataContext; delete r.$dataContext; $.map(r, function (n, t) { var f, e, o; if (r.hasOwnProperty(t) && (f = u.properties && u.properties[t], f && (e = f.converter, e))) switch (f.mode) { case Toolkit.Mode.OneTime: o = e.convert(n, r); r.hasOwnProperty(t) ? o && (r[t] = o) : __DEBUG__(r, t + " not found in " + i.controlType) } }); __DEBUG__({ properties: r }, "properties"); $.map(r, function (n, t) { var i, f, e; if (r.hasOwnProperty(t)) { if (i = { name: t, value: n, controlType: u.controlType, namespace: "WinJS.UI", changeEvent: u.properties && u.properties[t] && u.properties[t].changeEvent || u.changeEvent }, f = u.properties && u.properties[t], f) { i.mode = f.mode; switch (i.mode) { case Toolkit.Mode.OneTime: i.changeEvent = null; break; default: e = f.converter; e && (i.converter = e) } } __DEBUG__({ property: i, properties: r }, "applyBindingsToNode"); ko.applyBindingsToNode(u.controlElement, { property: i }) } }) }, _setReady: function (n, t) { var i = $(n), r = i.data("onready"); r && r(n, t); i.removeData("onready") }, _createViewModel: function (n) { return function (t, i) { try { $.extend(!0, i, n); __ASSERT__(i.name, "UNKNOWN_COMPONENT_NAME"); __ASSERT__(i.controlType, "UNKNOWN_CONTROL_TYPE"); i.setParams(t, i); i.create(t, i); var r = t && t.dataContext || t.$dataContext; return t.$dataContext = r, i.creating(t, i), r || t } catch (u) { console.error(i.controlType + " component creation error: " + u.message) } } }, _init: function (n, t) { var i = this; i.Control.prototype = new i._ControlBase; i._ContentControlBase.prototype = new i._ControlBase; i.ContentControl.prototype = new i._ContentControlBase; i._ItemsControlBase.prototype = new i._ControlBase; i.ItemsControl.prototype = new i._ItemsControlBase; i.Command.prototype = new i._ControlBase; i[t] = {}; $.map(n, function (n, r) { var e; try { if (n) { n.controlType = r; n.namespase = t; __ASSERT__(n.controlType, "UNKNOWN_COMPONENT_TYPE"); var o = n.type || i.Control, u = new o(n), f = u.name; __ASSERT__(f, "UNDEFINED_COMPONENT_NAME"); e = $("<template><\/template>")[0]; i._typeMapping[f] = r; i[t][r] = u; ko.components.register(f, { viewModel: { createViewModel: i._createViewModel(u) }, template: { element: e }, synchronous: !0 }) } } catch (s) { console.error(r + " registration error: " + s.message) } }); ko.bindingHandlers.property = { init: function (n, t) { var h; try { var a = $(n), r = t(), i = n.winControl, f = r.controlType, c = r.namespace, u = r.name, e = r.value, o = r.changeEvent, v = r.mode, s = r.converter; i && o && (h = function () { var n = s && s.convertBack ? s.convertBack(i[u]) : i[u], t; ko.isWriteableObservable(e) ? (t = e(), t != n && (e(n), __DEBUG__({ controlType: c + "." + f, propertyName: u, propertyOldValue: t, propertyNewValue: n }, "property changed"))) : e = n }, i.addEventListener(o, h, !1), ko.utils.domNodeDisposal.addDisposeCallback(n, function () { try { i && (i.removeEventListener(o, h), __DEBUG__(i, f + "." + u + " dispose!"), i.dispose()) } catch (n) { console.error(f + "." + u + " dom node disposal error: " + n.message) } })) } catch (l) { console.error(f + "." + u + " binding init error: " + l.message) } }, update: function (n, t) { try { var c = $(n), r = t(), e = n.winControl, o = r.controlType, l = r.namespace, f = r.name, u = r.converter, s = u && u.convert ? u.convert(r.value) : r.value; switch (r.mode) { case i.Mode.OneWayToSource: break; default: e[f] = ko.unwrap(s) } } catch (h) { console.error(o + "." + f + " binding update error: " + h.message) } } }; ko.bindingHandlers.component = { init: function (n, r, u, f, e) { try { var a = $(n), s = r(), o = ko.unwrap(s.params), h = ko.unwrap(s.name), v = s.dataBinding, c = i._typeMapping[h]; return i[t][c] && (o.$dataContext = o && o.dataContext || e.$data, o.hasOwnProperty("$data") && ($.extend(o, o.$dataContext), delete o.$data), o.hasOwnProperty("as") && ($.extend(o, o.as), delete o.as)), i._componentBindingHandler.init(n, r, u, f, e) } catch (l) { console.error("component binding error: " + l) } } }; $.map(n, function (n, r) { try { ko.bindingHandlers[r] = { init: function (n, u) { try { var e = u() || {}, o = { element: n, templateNodes: $.map($(n).children().remove(), function (n) { return n }) }, f = i._createViewModel(i[t][r]); return f && f(e, o), { controlsDescendantBindings: !1 } } catch (s) { console.error(r + " control creation error: " + s.message) } } }; __DEBUG__(ko.bindingHandlers[r], r + " binding handler") } catch (u) { console.error(r + " binding handler definition error " + u.message) } }) }, Control: function (n) { try { __ASSERT__(n, "CONTROLBASE_CREATION_WITHOUT_CONTROLDEFINITION_POVIDED"); __ASSERT__(n.controlType, "CONTROLBASE_CREATION_WITHOUT_CONTROL_TYPE_POVIDED"); this._construct(n); this._setProperty("_baseControlType", { value: "Control", writable: !1 }); this.category = "Control" } catch (t) { console.error("Control creation error: " + t.message) } }, ContentControl: function (n) { try { this._construct(n); this._setProperty("_baseControlType", { value: "ContentControl", writable: !1 }); this.category = "ContentControl" } catch (t) { console.error("Control creation error: " + t.message) } }, ItemsControl: function (n) { try { this._construct(n); this._setProperty("_baseControlType", { value: "ItemsControl", writable: !1 }); this.category = "ItemsControl" } catch (t) { console.error("Control creation error: " + t.message) } }, Command: function (n) { try { __ASSERT__(n, "CONTROLBASE_CREATION_WITHOUT_CONTROLDEFINITION_POVIDED"); __ASSERT__(n.controlType, "CONTROLBASE_CREATION_WITHOUT_CONTROL_TYPE_POVIDED"); this._construct(n); this._setProperty("_baseControlType", { value: "Command", writable: !1 }); this.category = "Command"; this._setProperty("createControlElement", { value: function (n) { var t = n && n.type; switch (t) { case "separator": this.controlElement = $("<hr>"); break; case "content": this.controlElement = $("<div>"); case "flyout": case "toggle": this.controlElement = $("<button>"); break; default: this.controlElement = $("<button>") } t && $(this.controlElement).attr("data-win-options", "{type:'" + t + "'}"); delete n.type; this.controlElement = this.controlElement[0] } }) } catch (t) { console.error("Command creation error: " + t.message) } } }; Toolkit._init(function () { return { AppBar: { type: Toolkit.ItemsControl, properties: { itemsSource: { selector: "appbarcommand, .appbarcommand, [data-bind^='AppBarCommand']", converter: { targetType: null, targetItemType: WinJS.UI.AppBarCommand, targetPropertyName: "commands" } } } }, AppBarCommand: { type: Toolkit.Command }, AutoSuggestBox: { properties: { queryText: { changeEvent: "change" } } }, BackButton: { containerElement: "<button>" }, Command: { name: "commandbutton", type: Toolkit.Command }, ContentDialog: { type: Toolkit.ContentControl }, DatePicker: { properties: { current: { changeEvent: "change" } } }, Hub: { type: Toolkit.ItemsControl, properties: { itemsSource: { selector: "hubsection, .hubsection, section, .section, [data-bind^='HubSection']", converter: { targetType: WinJS.Binding.List, targetItemType: WinJS.UI.HubSection, targetPropertyName: "sections" } }, headerTemplate: { selector: "hub-headertemplate", converter: { convert: function (n) { return function (t) { try { var i = $(n).clone().css({})[0]; return ko.applyBindingsToNode(i, { "with": t }), i } catch (r) { console.error("headerTemplate error: " + r.message) } } } } } } }, HubSection: { type: Toolkit.ContentControl }, FlipView: { type: Toolkit.ItemsControl, properties: { itemsSource: { selector: "itemcontainer, .flipviewitem", targetPropertyName: "itemDataSource", converter: { convert: function (n, t) { t.itemDataSource = Toolkit._createItemsSource(n, null, WinJS.Binding.List, "FlipView").dataSource; delete t.items } } }, itemTemplate: { selector: "flipview-itemtemplate", mode: Toolkit.Mode.OneTime, converter: { convert: Toolkit._itemTemplate } } } }, Flyout: { type: Toolkit.ContentControl }, ItemContainer: { type: Toolkit.ContentControl }, ListView: { type: Toolkit.ItemsControl, properties: { header: { selector: "listview-header" }, footer: { selector: "listview-footer" }, itemDataSource: null, itemsSource: { converter: { convert: function (n, t) { var u, i, r; if (n) { if (u = Toolkit._createItemsSource(n, null, WinJS.Binding.List, "ListView"), t.hasOwnProperty("groupDataSource") && (i = t.groupDataSource, r = u.createGrouped(i.groupKey, i.groupData, i.groupSorter), r)) { t.itemDataSource = r.dataSource; t.groupDataSource = r.groups.dataSource; return } t.itemDataSource = u.dataSource } delete t.itemsSource } } }, itemTemplate: { selector: "listview-itemtemplate", mode: Toolkit.Mode.OneTime, converter: { convert: Toolkit._itemTemplate } }, groupHeaderTemplate: { selector: "listview-groupheadertemplate", mode: Toolkit.Mode.OneTime, converter: { convert: function (n) { return function (t) { return t.then(function (t) { try { var i = $(n).clone().css({})[0]; return ko.applyBindingsToNode(i, { "with": t }), i } catch (r) { console.error("groupHeaderTemplate error: " + r.message) } }) } } } }, layout: { converter: { convert: function (n) { var t = ko.unwrap(n); if (typeof t == "string") switch (t.toUpperCase()) { case "GRID": return { type: WinJS.UI.GridLayout }; case "LIST": return new WinJS.UI.ListLayout; default: return null } else return t } } }, loadingState: { mode: Toolkit.Mode.OneWayToSource, changeEvent: "loadingstatechanged" } } }, Menu: { type: Toolkit.ItemsControl, name: "contextmenu", properties: { itemsSource: { selector: "menucommand, .menucommand, contextmenucommand, .contextmenucommand, [data-bind^='MenuCommand']", converter: { targetItemType: WinJS.UI.MenuCommand, targetPropertyName: "commands" } }, placement: { defaultValue: "top" }, alignment: { defaultValue: "center" } } }, MenuCommand: { name: "contextmenucommand", type: Toolkit.Command }, NavBar: { type: Toolkit.ContentControl }, NavBarCommand: { containerElement: "<div>" }, NavBarContainer: { type: Toolkit.ItemsControl, properties: { commands: { as: "itemsSource" }, itemsSource: { selector: "navbarcommand, .navbarcommand, [data-bind^='NavBarCommand']", converter: { targetType: WinJS.Binding.List, targetItemType: WinJS.UI.NavBarCommand, targetPropertyName: "data" } }, template: { selector: "navbarcontainer-itemtemplate", mode: Toolkit.Mode.OneTime, converter: { _convert: Toolkit._itemTemplate, convert: function (n) { return __DEBUG__({ template: n }, "template"), function (t) { try { __DEBUG__({ template: n, item: t }, "item"); var i = $(n).clone().css({})[0]; return ko.applyBindingsToNode(i, { "with": t }), i } catch (r) { console.error("NavBarContainer template error: " + r.message) } } } } } } }, Pivot: { type: Toolkit.ItemsControl, properties: { itemsSource: { selector: "pivotitem, .pivotitem, [data-bind^='PivotItem']", converter: { targetType: WinJS.Binding.List, targetItemType: WinJS.UI.PivotItem, targetPropertyName: "items" } }, items: null, selectedIndex: null } }, PivotItem: { type: Toolkit.ContentControl, properties: { title: { as: "header" }, header: { defaultValue: "#HEADER#" } } }, Rating: { containerElement: "<button>", properties: { maximum: { as: "maxRating" }, average: { as: "averageRating" }, value: { as: "userRating" }, userRating: { changeEvent: "change" } } }, SearchBox: { properties: { queryText: { changeEvent: "querychanged" } } }, SemanticZoom: { type: Toolkit.ContentControl, create: function (n) { var t, r, i, u; try { t = this; r = $(t.element); t.createControlElement(); i = $(t.templateNodes).match(".semanticzoomIn, .semanticzoomOut"); r.append(i); u = function (i) { try { var r = $(i).children(":first").unwrap(); if ($(t.controlElement).append(r), r.hasClass("semanticzoomOut")) return t.createControl(n).then(function () { }) } catch (u) { console.error(t.controlType + " item ready error: " + u.message) } }; i.each(function () { $(this).data({ onready: u }) }) } catch (f) { console.error(this.controlType + " creation failed: " + f.message) } }, creating: function () { }, properties: { zoomedOut: { changeEvent: "zoomchanged" } } }, SettingsFlyout: { type: Toolkit.ContentControl }, SplitView: { type: Toolkit.ContentControl, create: function () { try { var n = this, t = $(n.element); n.createControlElement(); t.append($(n.templateNodes)) } catch (i) { console.error(this.controlType + " creation failed: " + i.message) } }, creating: function (n) { try { var r = this, t = n.paneElement, i = n.contentElement; delete n.paneElement; delete n.contentElement; new Promise(function () { r.createControl(n).then(function (n) { t && $(n.paneElement).append($(t)); i && $(n.contentElement).append($(i)) }) }) } catch (u) { console.error(this.controlType + " creation failed: " + u.message) } }, properties: { paneElement: { selector: "splitview-pane" }, contentElement: { selector: "splitview-content" } } }, TimePicker: { properties: { current: { changeEvent: "change" } } }, ToggleSwitch: { properties: { checked: { changeEvent: "change" } } }, ToolBar: { type: Toolkit.ItemsControl, properties: { commands: { as: "itemsSource" }, itemsSource: { selector: "commandbutton, .commandbutton, appbarcommand, .appbarcommand, command, .command, [data-bind^='Command'], [data-bind^='AppBarCommand']", converter: { targetType: WinJS.Binding.List, targetItemType: WinJS.UI.Command, targetPropertyName: "data" } } } }, Tooltip: { type: Toolkit.ContentControl, properties: { content: { selector: "tooltip-content", mode: Toolkit.Mode.OneTime, converter: { convert: function (n, t) { n && (t.innerHTML = n instanceof HTMLElement ? $(n).remove().html() : n, delete t.content) } } } } }, ViewBox: { type: Toolkit.ContentControl } } }(), "WinJS"); __DEBUG__({ api: Toolkit, controls: Toolkit.WinJS }, "Toolkit API") })()